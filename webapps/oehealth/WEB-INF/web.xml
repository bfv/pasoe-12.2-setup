<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xmlns:web="http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" 
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
                             http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         metadata-complete="true" 
         id="WebApp_ID" 
         version="4.0">
  <display-name>Progress Application Server for OpenEdge Health Service</display-name>

  <absolute-ordering />

  <env-entry>
    <env-entry-name>logback/configuration-resource</env-entry-name>
    <env-entry-type>java.lang.String</env-entry-type>
    <env-entry-value>../logging.xml</env-entry-value>
  </env-entry>

  <!-- BEGIN:Spring security.definition  -->
  <!--
      - Location of the XML file that defines the root application context
      - Applied by ContextLoaderListener.
    -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/oehealthSecurity.xml</param-value>
  </context-param>


  <!-- Environment and PropertySource Abstraction -->
  <context-param>
    <param-name>contextInitializerClasses</param-name>
    <param-value>com.progress.appserv.services.security.OEHealthPropertySource</param-value>
  </context-param> 

  <!-- This listener needs to be first for logging of the web application
       startup operations. -->
  <listener>
    <listener-class>ch.qos.logback.classic.selector.servlet.ContextDetachingSCL</listener-class>
  </listener>

  <!-- The Spring Security listener needs to be loaded immediately after
       the logging listener.  It will initialize the entire security
       policy configured in the contextConfigLocation parameter above
       <listener>
         <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
       </listener>
       -->
  <!--
      - Loads the root application context of this web app at startup.
      - The application context is then available via
      - WebApplicationContextUtils.getWebApplicationContext(servletContext).
    -->
  <!--
      <listener>
        <listener-class>com.progress.appserv.service.health.OEHealthServletContextListener</listener-class>
      </listener>
      -->

  <!-- This section sets up the Spring Security requst filter that
       is mapped to the entire web application's URI space.  All
       requests will now be controlled by Spring Security.
       DO NOT CHANGE or you will compromise the web application's 
       security. 
       <filter>
         <filter-name>springSecurityFilterChain</filter-name>
         <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
       </filter>

       <filter-mapping>
         <filter-name>springSecurityFilterChain</filter-name>
         <url-pattern>/*</url-pattern>
       </filter-mapping>
       -->
  <!-- Add the Spring MVC functionality to allow access to the built-in
       MVC support for dynamic page generation -->
  <!--
      <servlet>
        <servlet-name>mvc-dispatch</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
          <param-name>contextConfigLocation</param-name>
          <param-value>/WEB-INF/spring/mvc-dispatch-context.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
      </servlet>
      -->
  <!-- END:Spring security.definition  -->
  <!-- Filter class uses for the web application's file logger -->
  <filter>
    <filter-name>LoggerContextFilter</filter-name>
    <filter-class>ch.qos.logback.classic.selector.servlet.LoggerContextFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LoggerContextFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- BEGIN: web application HTTP session controls used by Spring Security
       and the transports. -->

  <!-- USER EDIT: uncomment the <session-config> element below to
       control these HTTP session run-time attributes. 

       <http-only> {true|false} Block cookie access to JavaScript
         <secure>    {true|false} Require HTTPS for transmitting cookie
           <tracking-mode> {COOKIE|URL|SSL} How session id communicated to client
             <session-timeout> {minutes}  How many minutes for a session to be 
               idle before deletion
               -->
        <session-config>
            <session-timeout>1</session-timeout>
            <!-- 
            <cookie-config>
                <http-only>true</http-only>
                <secure>false</secure>
            </cookie-config>
            <tracking-mode>URL</tracking-mode>
            -->
        </session-config>

  <!-- BEGIN:container.security when using the Spring Security policy
       configuration oeablSecurity-container.xml -->

  <!-- USER EDIT: uncomment and configure container security ONLY if 
       oeablSecurity-container.xml is configured for the Spring 
       security above 
       The <auth-constraint> element needs to define the roles
       returned by the Java container's authentication.  Those
       Same role names need to be configured in oeablSecurity-container.xml
    -->
  <!--
      <security-constraint>
        <display-name>REST Manager Container Security Constraint</display-name>
        <web-resource-collection>
          <web-resource-name>Protected Area</web-resource-name>
          <url-pattern>/*</url-pattern>

          <http-method>DELETE</http-method>
          <http-method>GET</http-method>
          <http-method>POST</http-method>
          <http-method>PUT</http-method>
          <http-method>HEAD</http-method>

        </web-resource-collection>
        <auth-constraint>
          <role-name>ROLE_PSCAdmin</role-name>
          <role-name>ROLE_PSCOper</role-name>
          <role-name>ROLE_PSCUser</role-name>
        </auth-constraint>
      </security-constraint>

      <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>OpenEdge</realm-name>
      </login-config>

      <security-role>
        <role-name>ROLE_PSCAdmin</role-name>
      </security-role>
      <security-role>
        <role-name>ROLE_PSCOper</role-name>
      </security-role>
      <security-role>
        <role-name>ROLE_PSCUser</role-name>
      </security-role>

      -->

  <!-- END:container.security-->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
    <url-pattern>*.js</url-pattern>
    <url-pattern>*.css</url-pattern>
    <url-pattern>*.ico</url-pattern>
  </servlet-mapping>    

  <servlet>
    <servlet-name>HealthServlet</servlet-name>
    <servlet-class>org.apache.cxf.jaxrs.servlet.CXFNonSpringJaxrsServlet</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>com.progress.appserv.services.health.servlet.HealthApplication</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>HealthServlet</servlet-name>
    <url-pattern>/health/*</url-pattern>
  </servlet-mapping>

</web-app>
